var Client = require(__dirname+'/file_connect.js').Client;
//Создаем объект для обращения к серверу (Функции GET и POST)
client = new Client();

var Broker = {
  server :'http://localhost:57772/mdg-dev/',
  NewClass : {
    data: { namespace: "",
            nameClass: "",
            Super: "",
            Abstract: "",
            Description: ""
            }
  },
  DeleteClass : {
    data: { namespace: "",
            nameClass: ""}
  },
  CompileClass : {
    data: { namespace: "",
            nameClass: ""}
  },
  UpdateClass : {
    data: { namespace: "",
            text: "",
            nameClass: ""}
  },
  Method : {
    data: { namespace: "",
            nameClass: "",
            ClassMethod: "",
            nameMethod: "",
            ReturnType: "",
            Private: "",
            Final: ""}
  },
  text : 'Class Example.Studio Extends (%Persistent,%Populate)'+'\r\n{'+'\r\n//hgjgjgjgh'+'\r\n}',
  Property : {
    data: { namespace: "",
            nameClass: "",
            nameProperty: "",
            Type: "",
            Relationship: "",
            Required: "",
            Calculated: "",
            Parameter: []//Parameter = [{ Name:"MAXLEN", Data:100},{Name:"MINLEN", Data:50}]
          }
  },
  Obj : {
    data:{
      NameSpace: "",
      ClassName: "",
      Parameters: "",
      TempDir:"",
      Path:""
    }
  },
    refresh: function(CallBack){
      client.post( this.server + "refresh" ,this.Obj, function(data, response){
        CallBack(JSON.parse(data));
  })},
    namespace: function(CallBack){
    client.post( this.server + "namespaces" ,{}, function(data, response){
     CallBack(JSON.parse(data));
  })},
    getpath: function(CallBack){
    client.post( this.server + "getpath" ,this.Obj, function(data, response){
      CallBack(JSON.parse(data));
    })},
    classlist: function(CallBack){
    client.post(this.server + "namespaces/classlist",this.Obj, function(data, response){
      CallBack(JSON.parse(data));
  })},
    sourcetext: function(CallBack){
    client.post(this.server + "namespaces/classname" , this.Obj , function(data, response){
      CallBack(JSON.parse(data));
  })},
    propertyparameter: function(CallBack){
    client.post(this.server+"getparameter/", this.Obj, function(data, response){
      CallBack(JSON.parse(data));
  })},
    createclass: function(CallBack){

      client.post(this.server+"createclass", this.NewClass, function(data,response) {

    CallBack(data);
  })},
    compileclass:function(CallBack){
      client.post(this.server+"compilationclass", this.CompileClass, function(data,response) {
    CallBack(data);
  })},
    deleteclass: function(CallBack){
      client.post(this.server + "deleteclass", this.DeleteClass, function(data,response) {
    CallBack(data);
  })},
    updateclass: function(CallBack){
      client.post(this.server + "updateclass", this.UpdateClass, function(data,response) {
    CallBack(data);
  })},
    method: function(CallBack){
      client.post(this.server + "createmethod", this.Method, function(data,response) {
    CallBack(JSON.parse(data));
  })},
    property: function(CallBack){
      client.post(this.server + "createproperty", this.Property, function(data,response) {
    CallBack(JSON.parse(data));
  })}
};
module.exports = Broker;
