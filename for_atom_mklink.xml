<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.2 (Build 315U)" ts="2014-09-03 15:44:14">
<Class name="MDG.Request">
<Super>%Persistent</Super>
<TimeChanged>63433,56220.883298</TimeChanged>
<TimeCreated>63407,36185.325569</TimeCreated>

<Parameter name="Path">
<Default>C:/temp/</Default>
</Parameter>

<Method name="CreateBroker">
<Description>
в текущей области создаём брокера для работы с проектом
create broker in current namespace</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>broker</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set File=##class(%File).%New()
 //set st=File.CreateDirectory("c:\temp"),st=File.%Save()
 set ns = $namespace, $namespace="%SYS"
 set status=##class(Security.Applications).Get(broker,.CSP)
 if status '=1 {
  write !,"Создан брокер "_broker_" для области "_ns
  set cspProperties("AutheEnabled") = 64
  set cspProperties("NameSpace") = ns
  set cspProperties("DispatchClass") = "WEB.Broker"
  set cspProperties("IsNameSpaceDefault") = 0
  set tSC = ##Class(Security.Applications).Create(broker,.cspProperties)
  If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 }
 set $namespace=ns
 quit $$$OK
]]></Implementation>
</Method>

<Method name="GetNamespaces">
<Description>
Получение областей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim tSC As %Status = $$$OK
  #dim tNS As %String
  set str=""
  write "["
  //Получить список областей
  //Get the list of namespaces
  do List^%SYS.NAMESPACE(.tList)
  Set tNS=""
  for  {
    Set tNS=$Order(tList(tNS),1,tValue)
       If tNS="" {quit}
    set str=str_""""_tNS_""","
    }
  write $EXTRACT(str,1,*-1)
  write "]"
  quit tSC
]]></Implementation>
</Method>

<Method name="GetPath">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  #dim Path=""
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set Path=obj.TempDir_obj.NameSpace
  set ProxyObject=##class(%ZEN.proxyObject).%New()
  set ProxyObject.Path=Path
  set ProxyObject.Dir=obj.TempDir
  do ProxyObject.%ToJSON()
  set %response.Status="200 OK"
  set File=##class(%File).%New()
  do File.CreateDirectory(obj.TempDir)
  do File.CreateDirectory(Path)
  do ..WriteClassFiles(obj.NameSpace,Path)
  set defapp = $System.CSP.GetDefaultApp(obj.NameSpace)
  set linkPath = ..GetAppPath(defapp)
  /*
  только для локальных проектов под Windows
  */
  s mklPath = $Replace(Path,"/","\")
  //w !,"lp - "_linkPath
  d $zf(-1,"mklink /J "_mklPath_"\WebApps "_linkPath)
  //w !,"mklink /J "_mklPath_"/WebApps "_linkPath
  //do ..WriteWebFiles(obj.NameSpace,Path)
  do ..ROUTINE(obj.NameSpace,Path)
  quit $$$OK
]]></Implementation>
</Method>

<Method name="GetAppPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspapp</FormalSpec>
<Implementation><![CDATA[

  set ns = $namespace 
  set $namespace="%SYS"
  kill csp 
  set csp = ##class(Security.Applications).Get(cspapp,.csp)
  set $namespace=ns 
  quit $get(csp("Path"))
]]></Implementation>
</Method>

<Method name="WriteWebFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>NS,Path</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Path=Path_"/Web"
  #dim st As %Status=$$$OK
  // получаем веь приложение по умолчанию для области NS
  set defapp = $System.CSP.GetDefaultApp(NS)
  set ns = $namespace, $namespace="%SYS"
  kill csp
  set csp = ##class(Security.Applications).Get(defapp,.csp)
  set $namespace=ns
  set File=##class(%File).%New()
  set status=File.CreateDirectory(Path)
  set Path=Path_defapp
  set status=File.CreateDirectory(Path)
  set status=File.CopyDir($g(csp("Path")),Path,1)
  quit status
]]></Implementation>
</Method>

<Method name="WriteClassFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>NS,Class,text</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Path=..#Path_NS_"/Classes"
  set File=##class(%File).%New()
  set List=$LISTFROMSTRING(Class,".")
  set tempPath=Path_"/"
  for i=1:1:$LISTLENGTH(List)-1 {
	set tempPath=tempPath_$LIST(List,i)_"/"
	do File.CreateDirectory(tempPath)
	}
  set file=##class(%Stream.FileBinary).%New()
  set file.Filename=tempPath_$LIST(List,$LISTLENGTH(List))_".cls"
  set status=file.Write($ZCONVERT(text,"O","UTF8"))
  set status=file.%Save()
  quit $$$OK
]]></Implementation>
</Method>

<Method name="WriteClassFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>NS,Path</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Path=Path_"/Classes"
  #dim st As %Status=$$$OK
  set sn = $namespace
  set $namespace = NS
  set File=##class(%File).%New()
  do File.CreateDirectory(Path)
  set s=##class(%SQL.Statement).%New()
  set sql = "SELECT * FROM %Dictionary.ClassDefinition  where NOT id %STARTSWITH '%' and system <>4"
  set status=s.%Prepare(sql)
  set rs=s.%Execute()
  while rs.%Next() {
    set tempPath=Path_"/"
    set List=$LISTFROMSTRING(rs.%Get("ID"),".")
    for i=1:1:$LISTLENGTH(List)-1 {
      set tempPath=tempPath_$LIST(List,i)_"/"
      do File.CreateDirectory(tempPath)
	  }
	set tSC=##class(%Compiler.UDL.TextServices).GetTextAsStream(NS,rs.%Get("ID"),.tStream)
	set file=##class(%Stream.FileBinary).%New()
	set file.Filename=tempPath_$LIST(List,$LISTLENGTH(List))_".cls"
	set status=file.Write($ZCONVERT(tStream.Read(tStream.Size),"O","UTF8"))
	set status=file.%Save()
	kill file
	}
  set $namespace=sn
  quit status
]]></Implementation>
</Method>

<Method name="GetClass">
<Description>
получаем текст класса
Method returns the class text</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  #dim tSC As %Status = $$$OK
  #dim e As %Exception.AbstractException
  set temp=##class(%ZEN.proxyObject).%New()
  #dim tStream As %Stream.Character
  Try {
    Set tSC=##class(%Compiler.UDL.TextServices).GetTextAsStream(obj.NameSpace,obj.ClassName,.tStream)
    If $$$ISERR(tSC) quit
      set temp.SourceText=tStream.Read(tStream.Size)
      set temp.NameSpace=obj.NameSpace
      set temp.ClassName=obj.ClassName
      do temp.%ToJSON()
    }
    Catch (e) {
      Set tSC=e.AsStatus()
    }
  quit tSC
]]></Implementation>
</Method>

<Method name="GetClassList">
<Description>
 Список классов</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn = $namespace
  set $namespace = obj.NameSpace
  set s=##class(%SQL.Statement).%New()
  set sql = "SELECT * FROM %Dictionary.ClassDefinition  where NOT id %STARTSWITH '%' and system <>4"
  set status=s.%Prepare(sql)
  set str = ""
  set rs=s.%Execute()
  write "["
  while rs.%Next() {
    set str = str_ "{""Name"":"""_rs.%Get("ID")_"""},"
  }
  write $EXTRACT(str,1,*-1)
  write "]"
  set $namespace = sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateClass">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    /* Пример приходящих данных
    data: { namespace: "MDG-DEV",
          text: "Class Example.Studio Extends (%Persistent,%Populate)'+'\r\n{'+'\r\n//hgjgjgjgh'+'\r\n}",
          nameClass: "Example.Studio"
          }
    */
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn=$namespace
  set $namespace= obj.namespace
  set status=##class(%Dictionary.ClassDefinition).%ExistsId(obj.nameClass)
  if ('st){
  	set nc = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
  	set nc.Super = ""
    set nc.Abstract = ""
	  set st = nc.%Save()
	  do ..WriteClassFiles(obj.namespace,..#Path)
  }
  set stream=##class(%Stream.GlobalCharacter).%New()
  do stream.Write($ZCONVERT(obj.text,"I","UTF8"))
  set status= ##class(%Compiler.UDL.TextServices).SetTextFromStream(obj.namespace, obj.nameClass, stream)
  write status
  set $namespace=sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateClass">
<Description>
Cоздание класса</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    /* Пример приходящих данных
    data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          Super: "%Persistent,%Populate",
          Abstract: "0",
          Description: "This is TestClass"
          }
    */
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn = $namespace
  set $namespace = obj.namespace
  set o = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
  set o.Super = obj.Super
  set o.Abstract = obj.Abstract
  set o.Description = obj.Description
  set status = o.%Save()
  set tSC=##class(%Compiler.UDL.TextServices).GetTextAsStream(obj.namespace,obj.nameClass,.tStream)
  set file=##class(%Stream.FileBinary).%New()
  set Dir=##class(%File).%New()
  set Path=..#Path_obj.namespace_"/Classes"
  set tempPath=Path_"/"
  set List=$LISTFROMSTRING(obj.nameClass,".")
  for i=1:1:$LISTLENGTH(List)-1 {
    set tempPath=tempPath_$LIST(List,i)_"/"
    do Dir.CreateDirectory(tempPath)
	}
	set file.Filename=tempPath_$LIST(List,$LISTLENGTH(List))_".cls"
	set status=file.Write($ZCONVERT(tStream.Read(tStream.Size),"O","UTF8"))
	set status=file.%Save()
	kill file
  set $namespace = sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CompilationClass">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn = $namespace
  set $namespace = obj.namespace
  set str = ""
  set status=$system.OBJ.Compile(obj.nameClass)
  If $$$ISERR(status) {
     write "[{""""ErrorText"":"
     do $System.Status.DisplayError(status) write """}]"
     }
  set $namespace = sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="DeleteClass">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn = $namespace
  set $namespace = obj.namespace
  do ##class(%Studio.ClassMgr).Delete(obj.nameClass)
  set $namespace = sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateMethod">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    	/* Пример приходящих данных
	data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          ClassMethod: "1",
          nameMethod: "AtomIO",
          ReturnType: "%Status",
          Private: "0",
          Final: "1"
          }
          */
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set sn = $namespace
  set $namespace = obj.namespace
  set method=##class(%Dictionary.MethodDefinition).%New(obj.nameClass)
  set method.ClassMethod=obj.ClassMethod
  set method.Name=obj.nameMethod
  set method.ReturnType = obj.ReturnType
  set method.Private = obj.Private
  set method.Final = obj.Final
  set status=method.%Save()
  set $namespace = sn
  quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateProperty">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

      /* Пример приходящих данных
      data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          nameProperty: "test123",
          Type: "%String",
          Relationship: "0",
          Required: "1",
          Calculated: "0"
          }
        */
    $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    set sn = $namespace
    set $namespace = obj.namespace
    set property=##class(%Dictionary.PropertyDefinition).%New(obj.nameClass)
    set property.Name = obj.nameProperty
    set property.Description = obj.Description
    set property.Type = obj.Type
    set property.Collection = obj.Collection
    //Отношение
    set property.Relationship = obj.Relationship
    set property.Required = obj.Required
    set property.Calculated = obj.Calculated
    //Запись параметров
    for i=1:1:obj.Parameter.Size{
      do property.Parameters.SetAt(obj.Parameter.GetAt(i).Data,obj.Parameter.GetAt(i).Name)
      }
    set status=property.%Save()
    set $namespace = sn
    quit $$$OK
]]></Implementation>
</Method>

<Method name="GetParameters">
<Description>
Получение параметров</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
  set qqq = "%"_obj.Parameters
  set s=##class(%Library.ResultSet).%New("%Dictionary.ParameterDefinitionQuery:Summary")
  do s.Execute(qqq)
  set str = ""
  write "["
  while s.Next() {
    set str = str_ "{""Name"":"""_s.Get("Name")_"""},"
 }
 write $EXTRACT(str,1,*-1)
 write "]"
 quit $$$OK
]]></Implementation>
</Method>

<Method name="ROUTINE">
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace,Path</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim st As %Status=$$$OK
	set Path=Path_"/PROGRAMMS"
	set File=##class(%File).%New()
	do File.CreateDirectory(Path)
	set routine=##class(%ResultSet).%New("%Library.Routine:RoutineList")
	set status=routine.Execute("",1,"INT",namespace)
	while routine.Next() {
  	set ns=$namespace
  	set $namespace=namespace
  	set temp=##class(%Routine).%OpenId(routine.Get("Name"))
  	set $namespace=ns
  	set tempPath=Path_"/"
  	set List=$LISTFROMSTRING(routine.Get("Name"),".")
  	for i=1:1:$LISTLENGTH(List)-3 {
    	set tempPath=tempPath_$LIST(List,i)_"/"
    	do File.CreateDirectory(tempPath)
	    }
    set file=##class(%Stream.FileBinary).%New()
		set file.Filename=tempPath_$LIST(List,$LISTLENGTH(List)-2)_"."_$LIST(List,$LISTLENGTH(List)-1)_"."_$ZCVT($LIST(List,$LISTLENGTH(List)),"L")
		set status=file.CopyFrom(temp)
		set status=file.%Save()
    kill file
	}
	quit status
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^MDG.RequestD</DataLocation>
<DefaultData>RequestDefaultData</DefaultData>
<IdLocation>^MDG.RequestD</IdLocation>
<IndexLocation>^MDG.RequestI</IndexLocation>
<StreamLocation>^MDG.RequestS</StreamLocation>
<Data name="RequestDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="WEB.Broker">
<Super>%CSP.REST</Super>
<TimeChanged>63431,55686.160825</TimeChanged>
<TimeCreated>63431,55629.810634</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 
    <Route Url="/namespaces" Method="POST" Call="MDG.Request:GetNamespaces" />
    <Route Url="/namespaces/classlist" Method="POST" Call="MDG.Request:GetClassList" />
    <Route Url="/namespaces/classname" Method="POST" Call="MDG.Request:GetClass" />
    <Route Url="/updateclass" Method="POST" Call="MDG.Request:UpdateClass" />
    <Route Url="/createclass" Method="POST" Call="MDG.Request:CreateClass" />
    <Route Url="/compilationclass" Method="POST" Call="MDG.Request:CompilationClass" />
    <Route Url="/deleteclass" Method="POST" Call="MDG.Request:DeleteClass" />
    <Route Url="/createmethod" Method="POST" Call="MDG.Request:CreateMethod" />
    <Route Url="/createproperty" Method="POST" Call="MDG.Request:CreateProperty" />
    <Route Url="/getparameter" Method="POST" Call="MDG.Request:GetParameters"/>
    <Route Url="/getpath" Method="POST" Call="MDG.Request:GetPath"/>
    
</Routes>
]]></Data>
</XData>
</Class>


<Project name="for-atom" LastModified="2014-09-03 15:43:29.984796">
  <Items>
    <ProjectItem name="MDG.Request" type="CLS"></ProjectItem>
    <ProjectItem name="WEB.Broker" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
